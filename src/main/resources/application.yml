# application.properties를 application.yml로 변경후 아래와 같이 코드를 입력합니다
# Tip)
# application.properties를 사용하셔도 무방합니다만, 굳이 yml로 변경한 이유는 properties에 비해 상대적으로 유연한 구조를 가졌기 때문입니다.
# yml은 상위 계층에 대한 표현, List 등을 완전하게 표현할수가 있습니다.
# 최근의 많은 도구들이 yml 설정을 지원하기 때문에 이참에 시작해보시는 것을 추천드립니다.

# http://localhost:8080/h2-console
spring:
  profiles :
    active : local
#  h2:
#    console:
#      enabled: true
#  datasource:
#      url: jdbc:h2:mem:testdb
#      driver-class-name: org.h2.Driver
#      username: sa
#      password:
#      data : classpath:data-h2.sql
  datasource :
    url : jdbc:mysql://ec2-3-36-178-40.ap-northeast-2.compute.amazonaws.com:33095/mini2S?characterEncoding=utf8
    driver-class-name : com.mysql.cj.jdbc.Driver
    username : david
    password : dalock2dev
#  mail:
#    properties:
#      mail:
#        host: smtp.gmail.com
#        port: 587
#        username: id
#        password: pwd
#        smtp:
#          auth: true
#          connectiontimeout: 5000
#          timeout: 5000
#          writetimeout: 5000
#          starttls:
#            enable: true
#          socketFactory:
#            port: 465
#            class: javax.net.ssl.SSLSocketFactory
  jpa :
    database-platform : org.hibernate.dialect.MySQL5InnoDBDialect
    properties.hibernate :
      # Schema 자동 업데이트, Entity와 비교해서, 길이 변경은 제외
      hbm2ddl.auto : update
      # 보여지는 SQL을 예쁘게 보여줌
      format_sql : true
    showSql : true
    generate-ddl : true
    # WARN 23008 에러 제거
    open-in-view: false

# Inmemory 방법
#  jpa:
#    hibernate :
#      ddl-auto : create-drop
#    database-platform : org.hibernate.dialect.H2Dialect
#    show-sql : true
